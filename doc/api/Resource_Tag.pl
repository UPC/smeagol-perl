[   {   title => 'CreaTag t1',
        uri   => '/tag',
        op    => 'POST',
        input => { id => 't1', description => 'tag 1' },
        status  => sub { shift->code == HTTP_CREATED },
        new_ids => 1,
        output  => [],
    },
    {   title => 'CreaTag t2',
        uri   => '/tag',
        op    => 'POST',
        input => { id => 't2', description => 'tag 2' },
        status  => sub { shift->code == HTTP_CREATED },
        new_ids => 1,
        output  => [],
    },
    {   title => 'Crea Recurs aula',
        uri   => '/resource',
        op    => 'POST',
        input => {
            description => 'aula',
            info        => 'resource info',
        },
        status  => sub { shift->code == HTTP_CREATED },
        new_ids => 1,
        output  => [],
    },
    {   title => 'Obte tags del recurs aula quan no té encara cap tag',
        uri   => [ '/resource/', \&get_generated_id, '/tag' ],
        op    => 'GET',
        status => sub { shift->code == HTTP_MOVED_PERMANENTLY },
        output => [],
    },
    {   title =>
            'Obté tags del recurs aula quan no té encara cap tag (sense redirect)',
        uri    => [ '/tag/?resource=', \&get_generated_id ],
        op     => 'GET',
        status => sub                  { shift->code == HTTP_OK },
        output => [],
    },
    {   title => 'Assigna el tag t1 al recurs aula',
        uri   => [ '/resource/', \&get_generated_id, '/tag' ],
        id    => 't1',
        input => {},
        op    => 'PUT',
        status => sub { shift->code == HTTP_OK },
        output => [],
    },
    {   title  => 'Obte tags del recurs aula quan només té el tag t1',
        uri    => [ 'tag?resource=', \&get_generated_id ],
        op     => 'GET',
        status => sub { shift->code == HTTP_OK },
        output => [ { id => 't1', description => 'tag 1' } ],
    },
    {   title => 'Comprova que el recurs aula NO té assignat el tag t2',
        uri   => [ '/resource/', \&get_generated_id, '/tag/dummy' ],
        op    => 'GET',
        status => sub { shift->code == HTTP_NOT_FOUND },
        output => [],
    },
    {   title => 'Intenta assignar el tag t2 al recurs aula (invalid method)',
        uri   => [ '/resource/', \&get_generated_id, '/tag' ],
        input => {},
        op    => 'POST',
        status => sub { shift->code == HTTP_METHOD_NOT_ALLOWED },
        output => [],
    },
    {   title => 'Assigna el tag t2 al recurs aula',
        uri   => [ '/resource/', \&get_generated_id, '/tag' ],
        id    => 't2',
        input => {},
        op    => 'PUT',
        status => sub { shift->code == HTTP_OK },
        output => [],
    },
    {   title  => 'Obte els tags del recurs aula quan té assignats t1 i t2',
        uri    => [ 'tag?resource=', \&get_generated_id ],
        op     => 'GET',
        status => sub { shift->code == HTTP_OK },
        output => [
            { id => 't1', description => 'tag 1' },
            { id => 't2', description => 'tag 2' }
        ],
    },
    {   title =>
            'Obté tags del recurs aula quan té assignats t1 i t2 (sense redirect)',
        uri    => [ '/tag/?resource=', \&get_generated_id ],
        op     => 'GET',
        status => sub                  { shift->code == HTTP_OK },
        output => [
            { id => 't1', description => 'tag 1' },
            { id => 't2', description => 'tag 2' }
        ],
    },
    {   title  => 'Obté tags d\'un recurs inexistent',
        uri    => '/tag/?resource=123345678',
        op     => 'GET',
        status => sub { shift->code == HTTP_NOT_FOUND },
        output => [],
    },
    {   title => 'Comprova que el recurs aula té assignat el tag t2',
        uri   => [ '/resource/', \&get_generated_id, '/tag/t2' ],
        op    => 'GET',
        status => sub { shift->code == HTTP_OK },
        output => [],
    },
    {   title =>
            'Comprova que el recurs aula NO té assignat un tag inexistent',
        uri => [ '/resource/', \&get_generated_id, '/tag/dummy' ],
        op  => 'GET',
        status => sub { shift->code == HTTP_NOT_FOUND },
        output => [],
    },
]
